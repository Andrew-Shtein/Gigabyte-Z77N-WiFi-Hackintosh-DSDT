# Gigabyte GA-Z77N-WiFi Hackintosh DSDT Patch by Mrengles
#
# This all-in-one DSDT patch with the right Clover EFI Bootloader
# configuration and generated SSDT should produce a fully compatible
# Hackintosh running OS X Mavericks or Yosemite.
#
# Apply the patch to your extracted DSDT with MaciASL.
#
# Don't apply this patch to the same extracted DSDT more then once!
#
# This patch has only been tested with the following hardware:
#
# Gigabyte GA-Z77N-WiFi
# Intel Core i5/i7 Ivy Bridge CPUs
# NVidia/AMD Graphics GPUs
#
# Required Kext extensions for this Motherboard/DSDT combination.
#
# FakeSMC.kext
# FakePCIID.kext
# FakePCIID_XHCIMux.kext
# RealtekRTL8111.kext
#
# Thanks Toleda, JPalm, and Rehabman for their original DSDT work!
#-----------------------------------------------------------------------


# Add DTGP (Required for ACPI injection)
into method label DTGP remove_entry;
into definitionblock code_regex . insert
begin
Method (DTGP, 5, NotSerialized)\n
{\n
    If (LEqual (Arg0, Buffer (0x10)\n
            {\n
                /* 0000 */ 0xC6, 0xB7, 0xB5, 0xA0, 0x18, 0x13, 0x1C, 0x44,\n
                /* 0008 */ 0xB0, 0xC9, 0xFE, 0x69, 0x5E, 0xAF, 0x94, 0x9B\n
            }))\n
    {\n
        If (LEqual (Arg1, One))\n
        {\n
            If (LEqual (Arg2, Zero))\n
            {\n
                Store (Buffer (One)\n
                    {\n
                        0x03\n
                    }, Arg4)\n
                Return (One)\n
            }\n
            If (LEqual (Arg2, One))\n
            {\n
                Return (One)\n
            }\n
        }\n
    }\n
    Store (Buffer (One)\n
        {\n
            0x00\n
        }, Arg4)\n
    Return (Zero)\n
}\n
end;

# Add Debug Statement
into definitionblock code_regex . insert
begin Store ("Gigabyte GA-Z77N-WiFi Hackintosh DSDT Patch v1.5.2 by Mrengles", Debug)
end;

# Fix _T_0 -> T_0 Remarks
into_all all code_regex _T_0 replaceall_matched begin T_0 end;
into_all all code_regex _T_1 replaceall_matched begin T_1 end;
into_all all code_regex _T_2 replaceall_matched begin T_2 end;
into_all all code_regex _T_3 replaceall_matched begin T_3 end;
into_all all code_regex _T_4 replaceall_matched begin T_4 end;
into_all all code_regex _T_5 replaceall_matched begin T_5 end;
into_all all code_regex _T_6 replaceall_matched begin T_6 end;

# Fix QWordField Error
into method label _CRS parent_label PCI0 code_regex CreateDWordField\s\(BUF0,\s\\_SB.PCI0._Y0F._LEN,\sMSLN\) replace_matched begin CreateQWordField (BUF0, \\_SB.PCI0._Y0F._LEN, MSLN) end;
into method label _CRS parent_label PCI0 code_regex CreateDWordField\s\(BUF0,\s\\_SB.PCI0._Y0F._LEN,\sM4LN\) replace_matched begin CreateQWordField (BUF0, \\_SB.PCI0._Y0F._LEN, M4LN) end;

# Fix MUT0 Warning
into_all all code_regex (Acquire\s\(MUT0,\s0x)....\) replace_matched begin Acquire (MUT0, 0xFFFF) end;

# Fix _HID Name
into_all all code_regex (Name\s\(_HID,\s"ABCDEFGH") replace_matched begin Name (_HID, EisaId ("PNP0C15") end;

# Fix Non-Hex Caps
into_all all code_regex pnp0c14 replaceall_matched begin PNP0C14 end;

# Fix TCMF
into_all all code_regex If\s\(TCMF\)\s\{\} replace_matched begin 
If (TCMF)\n
{\n
    Return (Zero)\n
}\n
end;

# Fix Min/Max/Len/Gran All Zero Error
into device label SIO1 code_regex 0x00(,\s+//\s+L) replaceall_matched begin 0x01%1 end;

# Fix IO (Decodeâ€¦_length_0
into_all all code_regex 0x00,(\s+)//\sLength replaceall_matched begin 0x01,%1// Length
end;

# Fix Possible Operator Timeout Error
into_all all code_regex (Acquire\s\(....,\s0x)....\) replace_matched begin %1FFFF) end;

# Remove Device PEGP
into device label PEGP remove_entry;

# Rename GFX0 Devices -> IGPU
into device label GFX0 set_label begin IGPU end;
into_all all code_regex GFX0 replaceall_matched begin IGPU end;
into scope label _SB.PCI0.GFX0 set_label begin _SB.PCI0.IGPU end;
into scope label \_SB.PCI0.GFX0 set_label begin \_SB.PCI0.IGPU end;

# Rename Device PEG0 -> PEGP
into scope label _SB.PCI0.PEG0.PEGP set_label begin _SB.PCI0.PEGP.GFX0 end;
into_all all code_regex PEGP replaceall_matched begin GFX0 end;
into device label PEG0 set_label begin PEGP end;
into scope label _SB.PCI0.PEG0 set_label begin _SB.PCI0.PEGP end;
into_all all code_regex PEG0 replaceall_matched begin PEGP end;

# Add Device GFX0 and Device HDAU
into method label _DSM parent_adr 0x00010000 remove_entry;
into device name_adr 0x00010000 insert
begin
Device (GFX0)\n
{\n
    Name (_ADR, Zero)\n
    Name (_SUN, One)\n
    Method (_DSM, 4, NotSerialized)\n
    {\n
	    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	    Return (Package()\n
            {\n
                "@0,connector-type", Buffer() { 0x00, 0x08, 0x00, 0x00 },\n
                "@1,connector-type", Buffer() { 0x00, 0x08, 0x00, 0x00 },\n
                "@2,connector-type", Buffer() { 0x00, 0x08, 0x00, 0x00 },\n
                "@3,connector-type", Buffer() { 0x00, 0x08, 0x00, 0x00 },\n
                "hda-gfx", Buffer() { "onboard-2" },\n
	    })\n
    }\n
}\n
Device (HDAU)\n
{\n
    Name (_ADR, One)\n
    Method (_DSM, 4, NotSerialized)\n
    {\n
	    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	    Return (Package()\n
            {\n
               "hda-gfx", Buffer() { "onboard-2" },\n
	    })\n
    }\n
}\n
end;

# Add HDMI Audio Injection For Device IGPU
into method label _DSM parent_adr 0x00020000 remove_entry;
into device name_adr 0x00020000 insert
begin
	Method (_DSM, 4, NotSerialized)\n
	{\n
	    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	    Return (Package()\n
	    {\n
	        "AAPL,ig-platform-id", Buffer() { 0x07, 0x00, 0x62, 0x01 },\n
	        "hda-gfx", Buffer() { "onboard-1" },\n
	    })\n
	}\n
end;

# Add HDMI Audio Injection For Device HDEF (Default audio Layout-ID 3)
into method label _DSM parent_adr 0x001B0000 remove_entry;
into device name_adr 0x001B0000 insert
begin
    Method (_DSM, 4, NotSerialized)\n
    {\n
	    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
	    Return (Package()\n
	    {\n
                "layout-id", Buffer() { 0x03, 0x00, 0x00, 0x00 },\n
                "MaximumBootBeepVolume", Buffer (One) { 0x4D },\n
                "PinConfigurations", Buffer(Zero) {},\n
  	        "hda-gfx", Buffer() { "onboard-1" },\n
	    })\n
    }\n
end;

# Add MCHC
into device label MCHC parent_label PCI0 remove_entry;
into device label PCI0 insert begin
Device (MCHC)\n
{\n
	Name (_ADR, Zero)\n
}
end;

# Add SMBUS (Required for proper kext loading)
into device label BUS0 parent_adr 0x001F0003 remove_entry;
into device name_adr 0x001F0003 insert
begin
Device (BUS0)\n
{\n
    Name (_CID, "smbus")\n
    Name (_ADR, Zero)\n
    Device (DVL0)\n
    {\n
        Name (_ADR, 0x57)\n
        Name (_CID, "diagsvault")\n
        Method (_DSM, 4, NotSerialized)\n
        {\n
            If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
            Return (Package() { "address", 0x57 })\n
        }\n
    }\n
}\n
end;

# Add LPCB
into method label _DSM parent_label LPCB remove_entry;
into device label LPCB insert begin
Method (_DSM, 4, NotSerialized)\n
{\n
	Store (Package (0x02) {\n
		"device-id", Buffer (0x04) {0x44,0x1E,0x00,0x00}\n
	}, Local0)\n
	DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))\n
	Return (Local0)\n
}
end;

# Fix RTC (Prevents BIOS/UEFI resets)
into device name_hid PNP0B00 code_regex (IO\s\((?:\s*[^,]+,\s*(?:\/\/\s.*)?\s*\n)+\s*)(\dx\d+)(,\s*(?:\/\/\s.*)?\s*\n\s*\)) replace_matched
begin %10x02%3
end
